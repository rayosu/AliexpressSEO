package cc.surui.db;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.SQLException;import java.sql.Statement;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Vector;import cc.surui.core.PreparedStatementWrapper;public class SQLiteJDBC {	private static SQLiteJDBC self;	private Connection connection = null;	public static SQLiteJDBC instance(){		self = self == null ? SQLiteJDBC.create() : self;		return self;	}		public static SQLiteJDBC create() {		SQLiteJDBC sqLiteJDBC = new SQLiteJDBC();		sqLiteJDBC.connect();		return sqLiteJDBC;	}	private void connect() {		try {			Class.forName("org.sqlite.JDBC");			connection = DriverManager.getConnection("jdbc:sqlite:data.db");			connection.setAutoCommit(true);			System.out.println("Opened database successfully");		} catch (Exception e) {			System.err.println(e.getClass().getName() + ": " + e.getMessage());		}	}	private void init() {		Statement stmt = null;		try {			stmt = connection.createStatement();			String sql_product = "CREATE TABLE PRODUCT " +					"(ID LONG PRIMARY KEY    NOT NULL, " + 					" NAME           TEXT    NOT NULL, " + 					" STORE_ID       LONG    NOT NULL, " + 					" URL        	 VARCHAR(100), " + 					" PIC         	 VARCHAR(100))"; 			String sql_store = "CREATE TABLE STORE " +					"(ID LONG PRIMARY KEY    NOT NULL, " + 					" NAME           TEXT    NOT NULL, " + 					" URL        	 VARCHAR(100), " + 					" PIC         	 VARCHAR(100))"; 			stmt.executeUpdate(sql_product);			stmt.executeUpdate(sql_store);			stmt.close();		} catch (Exception e) {			System.err.println(e.getClass().getName() + ": " + e.getMessage());		}		System.out.println("Table created successfully");	}		public void beginTransaction(){        try {			connection.setAutoCommit(false);		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}		public void commitTransaction(){        try {			connection.commit();			connection.setAutoCommit(true);		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}		public void rollback(){        try{        	connection.rollback();        }catch(SQLException e){            e.printStackTrace();        }	}	    public int update(String sql, Object... params){    	PreparedStatementWrapper pstmt=null;        int count=0;        try {        	pstmt = PreparedStatementWrapper.create(connection, sql);			if(params.length != 0){				for(int index = 0; index < params.length; index++){					pstmt.setObject(index + 1, params[index]);				}			}//			System.out.println(pstmt.getSql());			count = pstmt.executeUpdate();			pstmt.close();        } catch (SQLException e) {            e.printStackTrace();        } catch (Exception e){            e.printStackTrace();        }        return count;    }	public List<Map<String, String>> query(String sql, Object... params) {		List<Map<String, String>> dsVector = new ArrayList<Map<String,String>>();		PreparedStatementWrapper pstmt = null;		ResultSet rs = null;		try {        	pstmt = PreparedStatementWrapper.create(connection, sql);			if(params.length != 0){				for(int index = 0; index < params.length; index++){					pstmt.setObject(index + 1, params[index]);				}			}//			System.out.println(pstmt.getSql());			rs = pstmt.executeQuery();			boolean flag = true;			while (rs.next()) {				flag = false;				ResultSetMetaData rsmd = rs.getMetaData();				Map<String, String> row = new HashMap<String, String>();				int colCount = rsmd.getColumnCount();				for (int i = 0; i < colCount; i++) {					row.put(rsmd.getColumnName(i + 1), rs.getString(i + 1));				}				dsVector.add(row);			}			pstmt.close();		} catch (SQLException e) {			e.printStackTrace();		} catch (Exception e) {			e.printStackTrace();		}		return dsVector;	}	public static void main(String args[]) {		SQLiteJDBC sqLiteJDBC = SQLiteJDBC.create();		sqLiteJDBC.init();	}}