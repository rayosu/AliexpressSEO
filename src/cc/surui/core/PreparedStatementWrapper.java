package cc.surui.core;import java.io.InputStream;import java.io.Reader;import java.math.BigDecimal;import java.net.URL;import java.sql.Array;import java.sql.Blob;import java.sql.Clob;import java.sql.Connection;import java.sql.Date;import java.sql.NClob;import java.sql.ParameterMetaData;import java.sql.PreparedStatement;import java.sql.Ref;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.RowId;import java.sql.SQLException;import java.sql.SQLWarning;import java.sql.SQLXML;import java.sql.Time;import java.sql.Timestamp;import java.util.Calendar;import java.util.HashMap;import java.util.Map;import java.util.regex.Matcher;import java.util.regex.Pattern;public class PreparedStatementWrapper implements PreparedStatement {	PreparedStatement prepStmt;	private String sql;	private Map<Integer, Object> values = new HashMap<Integer, Object>();	public static PreparedStatementWrapper create(Connection connection, String sql) throws SQLException{		return new PreparedStatementWrapper(connection, sql);	}		public String getSql() {		Pattern p = Pattern.compile("[?]");		if (sql == null || sql.equals("")) {			return "";		}		StringBuilder builder = new StringBuilder(sql);		Matcher mc = p.matcher(sql);		int i = 0;		int offset = 0;		while (mc.find()) {			Object value = values.get(i + 1);			if (value != null) {				if (value instanceof String) {					builder.replace(mc.start() + offset, mc.end() + offset, "'" + value + "'");					offset += value.toString().length() + 1;				} else {					builder.replace(mc.start() + offset, mc.end() + offset, value.toString());					offset += value.toString().length() - 1;				}			}			i++;		}		return builder.toString();	}		@SuppressWarnings("unused")	private PreparedStatementWrapper(){			}		public PreparedStatementWrapper(Connection connection, String sql) throws SQLException {		this.sql = sql;		this.prepStmt = connection.prepareStatement(sql);	}		@Override	public ResultSet executeQuery(String sql) throws SQLException {		return prepStmt.executeQuery(sql);	}	@Override	public int executeUpdate(String sql) throws SQLException {		return prepStmt.executeUpdate(sql);	}	@Override	public void close() throws SQLException {		prepStmt.close();	}	@Override	public int getMaxFieldSize() throws SQLException {		return prepStmt.getMaxFieldSize();	}	@Override	public void setMaxFieldSize(int max) throws SQLException {		prepStmt.setMaxFieldSize(max);	}	@Override	public int getMaxRows() throws SQLException {		return prepStmt.getMaxRows();	}	@Override	public void setMaxRows(int max) throws SQLException {		prepStmt.setMaxRows(max);	}	@Override	public void setEscapeProcessing(boolean enable) throws SQLException {		prepStmt.setEscapeProcessing(enable);	}	@Override	public int getQueryTimeout() throws SQLException {		return prepStmt.getQueryTimeout();	}	@Override	public void setQueryTimeout(int seconds) throws SQLException {		prepStmt.setQueryTimeout(seconds);	}	@Override	public void cancel() throws SQLException {		prepStmt.cancel();	}	@Override	public SQLWarning getWarnings() throws SQLException {		return prepStmt.getWarnings();	}	@Override	public void clearWarnings() throws SQLException {		prepStmt.clearWarnings();	}	@Override	public void setCursorName(String name) throws SQLException {		prepStmt.setCursorName(name);	}	@Override	public boolean execute(String sql) throws SQLException {		return prepStmt.execute(sql);	}	@Override	public ResultSet getResultSet() throws SQLException {		return prepStmt.getResultSet();	}	@Override	public int getUpdateCount() throws SQLException {		return prepStmt.getUpdateCount();	}	@Override	public boolean getMoreResults() throws SQLException {		return prepStmt.getMoreResults();	}	@Override	public void setFetchDirection(int direction) throws SQLException {		prepStmt.setFetchDirection(direction);			}	@Override	public int getFetchDirection() throws SQLException {		return prepStmt.getFetchDirection();	}	@Override	public void setFetchSize(int rows) throws SQLException {		prepStmt.setFetchSize(rows);			}	@Override	public int getFetchSize() throws SQLException {		return prepStmt.getFetchSize();	}	@Override	public int getResultSetConcurrency() throws SQLException {		return prepStmt.getResultSetConcurrency();	}	@Override	public int getResultSetType() throws SQLException {		return prepStmt.getResultSetType();	}	@Override	public void addBatch(String sql) throws SQLException {		prepStmt.addBatch(sql);			}	@Override	public void clearBatch() throws SQLException {		prepStmt.clearBatch();			}	@Override	public int[] executeBatch() throws SQLException {		return prepStmt.executeBatch();	}	@Override	public Connection getConnection() throws SQLException {		return prepStmt.getConnection();	}	@Override	public boolean getMoreResults(int current) throws SQLException {		return prepStmt.getMoreResults();	}	@Override	public ResultSet getGeneratedKeys() throws SQLException {		return prepStmt.getGeneratedKeys();	}	@Override	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {		return prepStmt.executeUpdate(sql, autoGeneratedKeys);	}	@Override	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {		return prepStmt.executeUpdate(sql, columnIndexes);	}	@Override	public int executeUpdate(String sql, String[] columnNames) throws SQLException {		return prepStmt.executeUpdate(sql, columnNames);	}	@Override	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {		return prepStmt.execute(sql, autoGeneratedKeys);	}	@Override	public boolean execute(String sql, int[] columnIndexes) throws SQLException {		return prepStmt.execute(sql, columnIndexes);	}	@Override	public boolean execute(String sql, String[] columnNames) throws SQLException {		return prepStmt.execute(sql, columnNames);	}	@Override	public int getResultSetHoldability() throws SQLException {		return prepStmt.getResultSetHoldability();	}	@Override	public boolean isClosed() throws SQLException {		return prepStmt.isClosed();	}	@Override	public void setPoolable(boolean poolable) throws SQLException {		prepStmt.setPoolable(poolable);	}	@Override	public boolean isPoolable() throws SQLException {		return prepStmt.isPoolable();	}	@Override	public void closeOnCompletion() throws SQLException {		prepStmt.closeOnCompletion();			}	@Override	public boolean isCloseOnCompletion() throws SQLException {		return prepStmt.isCloseOnCompletion();	}	@Override	public <T> T unwrap(Class<T> iface) throws SQLException {		return prepStmt.unwrap(iface);	}	@Override	public boolean isWrapperFor(Class<?> iface) throws SQLException {		return prepStmt.isWrapperFor(iface);	}	@Override	public ResultSet executeQuery() throws SQLException {		return prepStmt.executeQuery();	}	@Override	public int executeUpdate() throws SQLException {		return prepStmt.executeUpdate();	}	@Override	public void setNull(int parameterIndex, int sqlType) throws SQLException {		values.put(parameterIndex, sqlType);		prepStmt.setNull(parameterIndex, sqlType);			}	@Override	public void setBoolean(int parameterIndex, boolean x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setBoolean(parameterIndex, x);			}	@Override	public void setByte(int parameterIndex, byte x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setByte(parameterIndex, x);			}	@Override	public void setShort(int parameterIndex, short x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setShort(parameterIndex, x);			}	@Override	public void setInt(int parameterIndex, int x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setInt(parameterIndex, x);			}	@Override	public void setLong(int parameterIndex, long x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setLong(parameterIndex, x);			}	@Override	public void setFloat(int parameterIndex, float x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setFloat(parameterIndex, x);	}	@Override	public void setDouble(int parameterIndex, double x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setDouble(parameterIndex, x);			}	@Override	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setBigDecimal(parameterIndex, x);			}	@Override	public void setString(int parameterIndex, String x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setString(parameterIndex, x);			}	@Override	public void setBytes(int parameterIndex, byte[] x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setBytes(parameterIndex, x);			}	@Override	public void setDate(int parameterIndex, Date x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setDate(parameterIndex, x);			}	@Override	public void setTime(int parameterIndex, Time x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setTime(parameterIndex, x);	}	@Override	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setTimestamp(parameterIndex, x);			}	@Override	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setAsciiStream(parameterIndex, x, length);			}	@Override	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setUnicodeStream(parameterIndex, x, length);			}	@Override	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setBinaryStream(parameterIndex, x, length);			}	@Override	public void clearParameters() throws SQLException {		prepStmt.clearParameters();			}	@Override	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setObject(parameterIndex, x, targetSqlType);			}	@Override	public void setObject(int parameterIndex, Object x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setObject(parameterIndex, x);			}	@Override	public boolean execute() throws SQLException {		return prepStmt.execute();	}	@Override	public void addBatch() throws SQLException {		prepStmt.addBatch();			}	@Override	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {		values.put(parameterIndex, reader);		prepStmt.setCharacterStream(parameterIndex, reader, length);			}	@Override	public void setRef(int parameterIndex, Ref x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setRef(parameterIndex, x);			}	@Override	public void setBlob(int parameterIndex, Blob x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setBlob(parameterIndex, x);			}	@Override	public void setClob(int parameterIndex, Clob x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setClob(parameterIndex, x);			}	@Override	public void setArray(int parameterIndex, Array x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setArray(parameterIndex, x);			}	@Override	public ResultSetMetaData getMetaData() throws SQLException {		return prepStmt.getMetaData();	}	@Override	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setDate(parameterIndex, x, cal);			}	@Override	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setTime(parameterIndex, x, cal);			}	@Override	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setTimestamp(parameterIndex, x, cal);			}	@Override	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {		values.put(parameterIndex, sqlType);		prepStmt.setNull(parameterIndex, sqlType, typeName);	}	@Override	public void setURL(int parameterIndex, URL x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setURL(parameterIndex, x);	}	@Override	public ParameterMetaData getParameterMetaData() throws SQLException {		return prepStmt.getParameterMetaData();	}	@Override	public void setRowId(int parameterIndex, RowId x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setRowId(parameterIndex, x);			}	@Override	public void setNString(int parameterIndex, String value) throws SQLException {		values.put(parameterIndex, value);		prepStmt.setNString(parameterIndex, value);			}	@Override	public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {		values.put(parameterIndex, value);		prepStmt.setNCharacterStream(parameterIndex, value, length);			}	@Override	public void setNClob(int parameterIndex, NClob value) throws SQLException {		values.put(parameterIndex, value);		prepStmt.setNClob(parameterIndex, value);			}	@Override	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {		values.put(parameterIndex, reader);		prepStmt.setClob(parameterIndex, reader, length);			}	@Override	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {		values.put(parameterIndex, inputStream);		prepStmt.setBlob(parameterIndex, inputStream, length);	}	@Override	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {		values.put(parameterIndex, reader);		prepStmt.setNClob(parameterIndex, reader, length);			}	@Override	public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {		values.put(parameterIndex, xmlObject);		prepStmt.setSQLXML(parameterIndex, xmlObject);			}	@Override	public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setObject(parameterIndex, x, targetSqlType, scaleOrLength);			}	@Override	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setAsciiStream(parameterIndex, x, length);			}	@Override	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setBinaryStream(parameterIndex, x, length);			}	@Override	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {		values.put(parameterIndex, reader);		prepStmt.setCharacterStream(parameterIndex, reader, length);			}	@Override	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setAsciiStream(parameterIndex, x);			}	@Override	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {		values.put(parameterIndex, x);		prepStmt.setBinaryStream(parameterIndex, x);			}	@Override	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {		prepStmt.setCharacterStream(parameterIndex, reader);			}	@Override	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {		values.put(parameterIndex, value);		prepStmt.setNCharacterStream(parameterIndex, value);	}	@Override	public void setClob(int parameterIndex, Reader reader) throws SQLException {		values.put(parameterIndex, reader);		prepStmt.setClob(parameterIndex, reader);		}	@Override	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {		values.put(parameterIndex, inputStream);		prepStmt.setBlob(parameterIndex, inputStream);			}	@Override	public void setNClob(int parameterIndex, Reader reader) throws SQLException {		values.put(parameterIndex, reader);		prepStmt.setNClob(parameterIndex, reader);			}}