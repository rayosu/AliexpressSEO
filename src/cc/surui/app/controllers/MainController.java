package cc.surui.app.controllers;import java.io.File;import java.net.URL;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Comparator;import java.util.Date;import java.util.HashSet;import java.util.List;import java.util.ResourceBundle;import java.util.Set;import java.util.concurrent.Callable;import java.util.concurrent.ExecutionException;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Future;import cc.surui.excel.ExcelBuilder;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import javafx.event.ActionEvent;import javafx.event.Event;import javafx.event.EventHandler;import javafx.fxml.FXML;import javafx.scene.chart.CategoryAxis;import javafx.scene.chart.LineChart;import javafx.scene.chart.NumberAxis;import javafx.scene.chart.XYChart;import javafx.scene.chart.XYChart.Data;import javafx.scene.control.*;import javafx.scene.control.cell.PropertyValueFactory;import javafx.scene.input.MouseEvent;import javafx.scene.layout.HBox;import javafx.scene.layout.VBox;import javafx.scene.text.Text;import javafx.stage.FileChooser;import javafx.stage.Stage;import javafx.util.Callback;import javafx.util.StringConverter;import org.jsoup.helper.StringUtil;import org.thehecklers.monologfx.MonologFXButton;import org.thehecklers.monologfx.MonologFXButtonBuilder;import cc.surui.app.data.DataCenter;import cc.surui.app.view.ImageViewCell;import cc.surui.db.SQLiteJDBC;import cc.surui.model.Keyword;import cc.surui.model.Product;import cc.surui.model.Ranking;import cc.surui.model.Store;import cc.surui.reptile.HtmlInfo;import cc.surui.reptile.ReptileThread;public class MainController extends VBox {	static int pageSize = 36;	static int pageLimit = 5;	static int limit = pageSize * pageLimit;	private Stage primaryStage;	@FXML	private ResourceBundle resources;	@FXML	private URL location;		// 店铺信息	@FXML	MenuButton changeButton;	@FXML	Button storeButton;	@FXML	TextField storeId;	@FXML	Text storeName;	@FXML	Text productCount;	@FXML	Text keywordCount;		// 产品界面	// 产品界面 - 操作按钮	@FXML	Button syncButton;	@FXML	TextField pSearchText;	@FXML	Button pSearchButton;	@FXML	Button firstPageButton;	@FXML	Button lastPageButton;	@FXML	TextField pageText;	@FXML	Button nextPageButton;	@FXML	TextField pageSizeText;	@FXML	CheckBox hidePicCheckBox;    @FXML    Button exportAllProducts;	// 产品界面 - 产品列表	@FXML	TableView<Product> productGrid;	@FXML	TableColumn<Product, String> productId;	@FXML	TableColumn<Product, String> productPic;	@FXML	TableColumn<Product, String> productName;	@FXML	TableColumn<Product, String> keyword1;	@FXML	TableColumn<Product, String> keyword2;	@FXML	TableColumn<Product, String> keyword3;		// 关键词界面	@FXML	Button keywordButton;    @FXML    TextField keywordText;    @FXML    Button addKeywordButton;    @FXML    Button delKeywordButton;	@FXML	TableView<Keyword> keywordGrid;	@FXML	TableColumn<Keyword, String> keywordId;	@FXML	TableColumn<Keyword, String> keyword;	@FXML	TableColumn<Keyword, String> results;	@FXML	TableColumn<Keyword, String> topRank;	@FXML	TableColumn<Keyword, String> avgRank;	// 排名分析	@FXML	Button searchButton;    @FXML    Button exportButton;	@FXML	TextField searchText;    @FXML    HBox keywordTabs;	@FXML	TableView<Product> rankProductGrid;	@FXML	TableColumn<Product, String> rankProductId;	@FXML	TableColumn<Product, String> rankProductName;	@FXML	LineChart<String, Number> lineChart;    // 底部状态栏    @FXML    Label appStatus;	public void setApp(Stage primaryStage) {		this.primaryStage = primaryStage;		productGrid.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);		productId.setCellValueFactory(new PropertyValueFactory<Product, String>("id"));		productName.setCellValueFactory(new PropertyValueFactory<Product, String>("name"));		productPic.setCellValueFactory(new PropertyValueFactory<Product, String>("pic"));		productPic.setCellFactory(new Callback<TableColumn<Product,String>, TableCell<Product,String>>() {			@Override			public TableCell<Product, String> call(TableColumn<Product, String> param) {				// TODO Auto-generated method stub				return new ImageViewCell();			}		});        productPic.setVisible(false);		rankProductGrid.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);		rankProductId.setCellValueFactory(new PropertyValueFactory<Product, String>("id"));		rankProductName.setCellValueFactory(new PropertyValueFactory<Product, String>("name"));		keywordGrid.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);		keywordId.setCellValueFactory(new PropertyValueFactory<Keyword, String>("id"));		keyword.setCellValueFactory(new PropertyValueFactory<Keyword, String>("keyword"));		results.setCellValueFactory(new PropertyValueFactory<Keyword, String>("results"));		topRank.setCellValueFactory(new PropertyValueFactory<Keyword, String>("topRank"));		avgRank.setCellValueFactory(new PropertyValueFactory<Keyword, String>("avgRank"));		CategoryAxis xAxis = (CategoryAxis) lineChart.getXAxis();		NumberAxis yAxis = (NumberAxis) lineChart.getYAxis();		// yAxis.setMinorTickVisible(false);		int initYLowerBound = 0;		yAxis.setLowerBound(initYLowerBound);		int initYUpperBound = limit;		yAxis.setUpperBound(initYUpperBound);		// 修改排名格式显示		yAxis.setTickLabelFormatter(new StringConverter<Number>() {			@Override			public String toString(Number object) {				return String.valueOf(initYUpperBound - (int) object.doubleValue());			}			@Override			public Number fromString(String string) {				return initYUpperBound - Double.parseDouble(string);			}		});		this.layoutChildren();		lineChart.layout();	}	public void initEvent() {		ObservableList<MenuItem> menuItems = changeButton.getItems();		for (MenuItem menuItem : menuItems) {			menuItem.setOnAction(new EventHandler<ActionEvent>() {				@Override				public void handle(ActionEvent event) {					String storeId = menuItem.getId();					MainController.this.storeId.setText(storeId);					storeName.setText(menuItem.getText());                    initProductInfo();                    pageProductInfo(1);                    initKeywordInfo();//					MonologFX mono = MonologFXBuilder.create()//			            .modal(true)//			            .message("Welcome to MonologFX! Please feel free to try it out and share your thoughts.")//			            .titleText("Important Announcement")//			            .buttonAlignment(MonologFX.ButtonAlignment.CENTER)//			            .build();//			        MonologFXButton.Type retval = mono.show();				}			});		}        storeButton.setOnMouseClicked(new EventHandler<MouseEvent>() {            @Override            public void handle(MouseEvent event) {                String id = storeId.getText().trim();                if(!id.matches("\\d+")) {                    System.out.print("店铺ID不是纯数字");                    return;                }                Store store = new Store();                store.setId(Long.parseLong(id));                store = store.get();                if(store != null){                    System.out.print("店铺已经收录");                    return;                }                HtmlInfo htmlInfo = HtmlInfo.create("http://www.aliexpress.com/store/all-wholesale-products/%s.html", id);                if(htmlInfo != null) {                    Store myStore = htmlInfo.getStoreInfo();                    myStore.setId(Long.parseLong(id));                    myStore.saveOrUpdate();                    storeName.setText(myStore.getName());                    productCount.setText(myStore.getProductCount().toString());                    MenuItem menuItem = new MenuItem(myStore.getName());                    menuItem.setId(myStore.getId().toString());                    changeButton.getItems().add(menuItem);                    keywordCount.setText("0");                    initProductInfo();                    pageProductInfo(1);                    initKeywordInfo();                }            }        });		// 产品界面按钮监听		syncButton.setOnMouseClicked(new EventHandler<Event>() {			@Override			public void handle(Event event) {				syncProductInfo();				if (DataCenter.instance().products != null) {					final ObservableList<Product> products = FXCollections.observableArrayList(DataCenter.instance().products);					rankProductGrid.setItems(products);				}			}		});        exportAllProducts.setOnMouseClicked(new EventHandler<MouseEvent>() {            @Override            public void handle(MouseEvent event) {            }        });		pSearchText.setOnInputMethodTextChanged(new EventHandler<Event>() {			@Override			public void handle(Event event) {				String pSearchString = pSearchText.getText();				System.out.println(pSearchString);				if(pSearchString.length() >= 9 && pSearchString.matches("\\d+")){					pageProductInfo(1);				}			}		});		pSearchButton.setOnMouseClicked(new EventHandler<Event>() {			@Override			public void handle(Event event) {			}		});		firstPageButton.setOnMouseClicked(new EventHandler<Event>() {			@Override			public void handle(Event event) {				pageProductInfo(1);			}		});		lastPageButton.setOnMouseClicked(new EventHandler<Event>() {			@Override			public void handle(Event event) {				String pageIndexString = pageText.getText().trim();				int pageIndex = 1;				if(pageIndexString.matches("[1-9]+\\d*") && !pageIndexString.equals("1")){					pageIndex = Integer.parseInt(pageIndexString) - 1;				}				pageProductInfo(pageIndex);			}		});		nextPageButton.setOnMouseClicked(new EventHandler<Event>() {			@Override			public void handle(Event event) {				String pageIndexString = pageText.getText().trim();				int pageIndex = 1;				if(pageIndexString.matches("[1-9]+\\d*")){					pageIndex = Integer.parseInt(pageIndexString) + 1;				}				System.out.println(pageIndex);				pageProductInfo(pageIndex);							}		});		hidePicCheckBox.setOnMouseClicked(new EventHandler<Event>() {			@Override			public void handle(Event event) {				if(hidePicCheckBox.isSelected()){                    productPic.setVisible(true);				} else {                    productPic.setVisible(false);				}			}		});				keywordButton.setOnMouseClicked(new EventHandler<Event>() {			@Override			public void handle(Event event) {				syncKeywordInfo();				initKeywordInfo();			}		});        addKeywordButton.setOnMouseClicked(new EventHandler<MouseEvent>() {            @Override            public void handle(MouseEvent event) {                String s = keywordText.getText().trim();                if(!StringUtil.isBlank(s)){                    Keyword keyword = new Keyword();                    keyword.setKeyword(s);                    keyword = keyword.get();                    if(keyword == null){                    } else {                    }                }            }        });        delKeywordButton.setOnMouseClicked(new EventHandler<MouseEvent>() {            @Override            public void handle(MouseEvent event) {                Keyword selKeyword = keywordGrid.getSelectionModel().getSelectedItem();                selKeyword.delete();                keywordGrid.getItems().remove(selKeyword);            }        });		searchButton.setOnMouseClicked(new EventHandler<Event>() {			@Override			public void handle(Event event) {				startSearch();				keywordAnalyse();				initKeywordInfo();			}		});        exportButton.setOnMouseClicked(new EventHandler<Event>() {            @Override            public void handle(Event event) {                appStatus.setText("正在准备导出数据...");                FileChooser fileChooser = new FileChooser();                fileChooser.setSelectedExtensionFilter(new FileChooser.ExtensionFilter("文件格式", "xls"));                // 今日日期                SimpleDateFormat dateformat=new SimpleDateFormat("yyyy-MM-dd");                String dateString = dateformat.format(new Date());                fileChooser.setInitialFileName("排名数据" + dateString + ".xls");                File file = fileChooser.showSaveDialog(primaryStage);                if(file != null){                    String filePath = file.getAbsolutePath();                    Ranking rankingQuery = new Ranking();                    List<Ranking> rankings = rankingQuery.list();                    if(!filePath.matches("^.*\\.xls$")){                        filePath += ".xls";                    }                    ExcelBuilder.exportRankings(rankings, filePath);                    appStatus.setText("文件导出成功!");                }            }        });		searchText.setOnInputMethodTextChanged(new EventHandler<Event>() {            @Override            public void handle(Event event) {                System.out.println("输入了文字: " + searchText.textProperty().get());            }        });				rankProductGrid.setOnMouseClicked(new EventHandler<Event>() {			@Override			public void handle(Event event) {//				Object target = event.getTarget();//				if(target.getClass() == LabeledText.class){//					LabeledText labeledText = (LabeledText)target;//					System.out.println(labeledText.getText());//				}//				System.out.println(target.getClass().getTypeName());                Product product = rankProductGrid.getSelectionModel().getSelectedItem();                Ranking ranking = new Ranking();                ranking.setProductId(product.getId());                List<Ranking> rankings = ranking.list();                initRankingInfo(product.getId());            }		});	}	/**	 * 初始化店铺信息	 */	public void initStoreInfo() {		String storeId = this.storeId.getText();		HtmlInfo htmlInfo = HtmlInfo.create("http://www.aliexpress.com/store/all-wholesale-products/%s.html", storeId);		if(htmlInfo != null) {			Store myStore = htmlInfo.getStoreInfo();			myStore.setId(Long.parseLong(storeId));			myStore.saveOrUpdate();			this.storeName.setText(myStore.getName());			this.productCount.setText(myStore.getProductCount().toString());		}				List<Store> stores = new Store().list();		changeButton.getItems().add(new SeparatorMenuItem());		for (Store store : stores) {			MenuItem menuItem = new MenuItem(store.getName());			menuItem.setId(store.getId().toString());            menuItem.setOnAction(new EventHandler<ActionEvent>() {                @Override                public void handle(ActionEvent event) {                    String storeId = menuItem.getId();                    MainController.this.storeId.setText(storeId);                    storeName.setText(menuItem.getText());                    initProductInfo();                    pageProductInfo(1);                    initKeywordInfo();                }            });			changeButton.getItems().add(menuItem);		}	}	/**	 * 同步店铺产品列表	 */	public void syncProductInfo() {		// 店铺ID		String storeId = this.storeId.getText();		HtmlInfo htmlInfo = HtmlInfo.create("http://www.aliexpress.com/store/all-wholesale-products/%s.html", storeId);		int productCount = htmlInfo.getMyProductCount();		int pageCount = (int) Math.ceil((float) productCount / pageSize);		List<Product> productList = new ArrayList<>();		for (int page = 1; page <= pageCount; page++) {			HtmlInfo productHtmlInfo = HtmlInfo.create("http://www.aliexpress.com/store/%s/search/%s.html", storeId, page);			if(productHtmlInfo == null) continue;			// 获取店铺产品			List<Product> list = productHtmlInfo.getMyProducts(storeId);			productList.addAll(list);		}		// 产品存起来		DataCenter.instance().products = productList;		// 保存进数据库		SQLiteJDBC.instance().beginTransaction();		for (Product product : productList) {			if (product.get() == null) {				product.save();			} else {				product.update();			}		}		SQLiteJDBC.instance().commitTransaction();	}	public void syncKeywordInfo() {		// 店铺ID		String storeId = this.storeId.getText();		List<Product> products = DataCenter.instance().products;		if (products == null) {			MonologFXButton mlb = MonologFXButtonBuilder.create().defaultButton(true).type(MonologFXButton.Type.OK).build();			return;		}		Set<String> keywords = new HashSet<String>();		for (Product product : products) {			HtmlInfo productHtmlInfo = HtmlInfo.create(product.getUrl());			if(productHtmlInfo == null) continue;			Set<String> list = productHtmlInfo.getKeywords();			keywords.addAll(list);		}		System.out.println(StringUtil.join(keywords, ","));		// 保存进数据库		SQLiteJDBC.instance().beginTransaction();		for (String string : keywords) {			Keyword keyword = new Keyword();			keyword.setStoreId(storeId);			keyword.setKeyword(string);			if(keyword.list().isEmpty()){				keyword.save();			}		}		SQLiteJDBC.instance().commitTransaction();	}	/**	 * 初始化店铺产品列表	 */	public void initProductInfo() {		// 店铺ID		String storeId = this.storeId.getText();		Product product = new Product();		product.setStoreId(storeId);		// 获取店铺产品		List<Product> productList = product.list();		// 产品存起来		DataCenter.instance().products = productList;		productList.sort(new Comparator<Product>() {			@Override			public int compare(Product o1, Product o2) {				return o1.getId().compareTo(o2.getId());			}		});		final ObservableList<Product> products = FXCollections.observableArrayList(productList);        keywordCount.setText(String.valueOf(productList.size()));		rankProductGrid.setItems(products);	}		/**	 * 分页显示产品列表	 * @param _pageIndex	 */	public void pageProductInfo(int _pageIndex){		int pPageSize = 100;		String pageSizeString = pageSizeText.getText().trim();		if(pageSizeString.matches("[1-9]+\\d*")){			pPageSize = Integer.parseInt(pageSizeString);		} else {			pageSizeText.setText(pPageSize+"");		}		String searchString = pSearchText.getText().trim();		List<Product> pageProductList = new ArrayList<>();		List<Product> productList = DataCenter.instance().products;		int index = 1;		for (Product product : productList) {			if(!StringUtil.isBlank(searchString)					&& !product.getId().toString().equals(searchString)					&& !product.getName().equalsIgnoreCase(searchString)){				continue;			}			if(index > (_pageIndex-1) * pPageSize && index <= _pageIndex * pPageSize){				pageProductList.add(product);			}			index++;		}		if(!pageProductList.isEmpty()){			pageText.setText(_pageIndex+"");		}		final ObservableList<Product> products = FXCollections.observableArrayList(pageProductList);		productGrid.setItems(products);	}	/**	 * 初始化关键词列表	 */	public void initKeywordInfo() {		// 店铺ID		String storeId = this.storeId.getText();		Keyword keyword = new Keyword();		keyword.setStoreId(storeId);		List<Keyword> keywordList = keyword.list();		// 关键词存起来		DataCenter.instance().keywords = keywordList;		keywordCount.setText(keywordList.size()+"");		keywordList.sort(new Comparator<Keyword>() {			@Override			public int compare(Keyword o1, Keyword o2) {				return o1.getKeyword().compareToIgnoreCase(o2.getKeyword());			}		});		final ObservableList<Keyword> keywords = FXCollections.observableArrayList(keywordList);		keywordGrid.setItems(keywords);	}	/**	 * 初始化排名信息	 */	public void initRankingInfo(Long productId){		// 店铺ID		String storeId = this.storeId.getText();		Ranking rankingQuery = new Ranking();		rankingQuery.setStoreId(storeId);		rankingQuery.setProductId(productId);        List<Ranking> rankings = rankingQuery.list();        // 关键词集合        Set<String> keywords = new HashSet<String>();        for (Ranking ranking : rankings){            keywords.add(ranking.getKeyword());        }        lineChart.getData().clear();        keywordTabs.getChildren().clear();        for (String keyword : keywords){            Button button = new Button();            button.setText(keyword);            button.setOnMouseClicked(new EventHandler<MouseEvent>() {                @Override                public void handle(MouseEvent event) {                    rankingQuery.setKeyword(keyword);                    List<Ranking> rankings = rankingQuery.list();                    showRankingInfo(rankings, keyword);                }            });            keywordTabs.getChildren().add(button);        }	}    private void showRankingInfo(List<Ranking> rankings, String keyword){        List<Data<String, Number>> rankingList = new ArrayList<XYChart.Data<String, Number>>();        for (Ranking ranking : rankings) {            System.out.println(ranking.getRank());            rankingList.add(new Data<String, Number>(ranking.getDate(), limit - ranking.getRank() - 10));        }        final ObservableList<Data<String, Number>> rankingDatas = FXCollections.observableArrayList(rankingList);        XYChart.Series<String, Number> series = new XYChart.Series<String, Number>();        series.setName(keyword);        series.setData(rankingDatas);        lineChart.getData().clear();        lineChart.getData().add(series);        lineChart.layout();    }		/**	 * 开始检索排名	 */	public void startSearch() {		// 店铺ID		String storeId = this.storeId.getText();		List<Keyword> keywords = DataCenter.instance().keywords;		if(keywords == null || keywords.isEmpty()){			return;		}		for (Keyword keyword : keywords) {			List<Product> products = searchProducts(keyword.getKeyword(), pageLimit);			int rank = 1;			for (Product product : products) {				// 本店产品				if(product.getStoreId().equals(storeId)){					// 今日日期					SimpleDateFormat dateformat=new SimpleDateFormat("yyyy-MM-dd");					String dateString = dateformat.format(new Date());					// 查询不存在今日排行信息则添加					Ranking ranking = new Ranking();					ranking.setKeyword(keyword.getKeyword());					ranking.setProductId(product.getId());					ranking.setDate(dateString);					ranking.setStoreId(storeId);					if(ranking.list().isEmpty()){						ranking.setRank(rank);						ranking.save();					}				}				rank++;			}		}	}	/**	 * 统计分析关键词情况	 */	public void keywordAnalyse(){		// 店铺ID		String storeId = this.storeId.getText();		// 今日日期		SimpleDateFormat dateformat=new SimpleDateFormat("yyyy-MM-dd");		String dateString = dateformat.format(new Date());				SQLiteJDBC.instance().beginTransaction();		List<Keyword> keywords = DataCenter.instance().keywords;		for (Keyword keyword : keywords) {			Ranking rankingQuery = new Ranking();			rankingQuery.setKeyword(keyword.getKeyword());			rankingQuery.setStoreId(storeId);			rankingQuery.setDate(dateString);			List<Ranking> rankings = rankingQuery.list();			if(rankings.isEmpty()) continue;						// 分析关键词统计信息			keyword.setResults(rankings.size());			int topRank = rankings.get(0).getRank();			int totalRank = 0;			for (Ranking ranking : rankings) {				if(topRank > ranking.getRank()){					topRank = ranking.getRank();				}				totalRank += ranking.getRank();			}			keyword.setTopRank(rankings.get(0).getRank());			keyword.setAvgRank(totalRank / rankings.size());			keyword.update();		}		SQLiteJDBC.instance().commitTransaction();	}	/**	 * 获取检索到的产品	 * @param keyword	 * @param pageCount	 * @return	 */	private List<Product> searchProducts(String keyword, int pageCount) {		// 创建线程池        ExecutorService pool = Executors.newFixedThreadPool(pageCount);        List<Future<List<Product>>> futures = new ArrayList<>();		List<Product> allProducts = new ArrayList<Product>();		for (int page = 1; page <= pageCount; page++) {			Callable<List<Product>> task = new ReptileThread(keyword, pageCount, page, page);			Future<List<Product>> future = pool.submit(task);			futures.add(future);//			HtmlInfo htmlInfo = HtmlInfo.create("http://www.aliexpress.com/wholesale?g=y&SearchText=%s&CatId=0&shipCountry=us&page=%d", keyword, page);//			List<Product> products = htmlInfo.getProducts(pageSize, page);//			allProducts.addAll(products);		}        for (Future<List<Product>> future : futures) {        	try {				allProducts.addAll(future.get());			} catch (InterruptedException | ExecutionException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		// 关闭线程池        pool.shutdown();		return allProducts;	}		public void setRankingStoreId(){		List<Product> products = new Product().list();				SQLiteJDBC.instance().beginTransaction();		for (Product product : products) {			Ranking ranking = new Ranking();			ranking.setProductId(product.getId());			List<Ranking> rankings = ranking.list();			for (Ranking rank : rankings) {				rank.setStoreId(product.getStoreId());				rank.update();			}		}		SQLiteJDBC.instance().commitTransaction();			}}