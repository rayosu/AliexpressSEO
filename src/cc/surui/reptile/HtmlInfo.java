package cc.surui.reptile;import java.io.IOException;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Set;import org.jsoup.Connection;import org.jsoup.HttpStatusException;import org.jsoup.Jsoup;import org.jsoup.helper.StringUtil;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import org.jsoup.select.Elements;import cc.surui.model.Product;import cc.surui.model.Store;public class HtmlInfo {	private Document doc;	private HtmlInfo() {	}	public static HtmlInfo create(String url, Object... params) {		HtmlInfo htmlInfo = new HtmlInfo();		htmlInfo.doc = htmlInfo.getDocument(String.format(url, params), 0);		if(htmlInfo.doc != null){			htmlInfo.lazyLoad();			return htmlInfo;		}		return null;	}	private Document getDocument(String url, int deep) {		deep++;		if(deep == 2){//			new HttpStatusException("网络不通", 503, url).printStackTrace();			return null;		}		Connection connection = Jsoup.connect(url).userAgent("Mozilla");		Document document = null;		try {			document = connection.get();		} catch (IOException e) {			return getDocument(url, deep);		}		return document;	}		private void lazyLoad(){		// 处理懒加载的页面		Element hsBelow = doc.getElementById("hs-below-list-items");		if (hsBelow != null) {			Element oTextarea = doc.getElementsByClass("lazy-render").get(0);			String doc = oTextarea.text();			oTextarea.remove();			Document innerDocument = Jsoup.parse(doc);			hsBelow.appendChild(innerDocument);		}	}	/**	 * 获取产品信息	 * 	 * @return	 */	public List<Product> getMyProducts(String storeId) {		List<Product> products = new ArrayList<Product>();				Elements items = doc.select("#node-gallery .items-list .item");		for (Element item : items) {			try {				// 产品信息				Element detailElement = item.select(".detail h3 a").get(0);				String productId = item.select(".atc-product-id").get(0).val();				String productName = detailElement.attr("title");				String productHref = detailElement.attributes().get("href");				String productPic = item.select(".picCore").get(0).attributes().get("src");								Product product = new Product(storeId, Long.parseLong(productId), productName, productHref, productPic);				products.add(product);			} catch (Exception e) {				e.printStackTrace();			}		}		return products;	}	public int getMyProductCount() {		String productCount = doc.select("#result-info strong").text();		if (!StringUtil.isBlank(productCount)) {			return Integer.parseInt(productCount);		}		productCount = doc.select(".search-count").text();		if (!StringUtil.isBlank(productCount)) {			return Integer.parseInt(productCount);		}		return 0;	}	/**	 * 获取产品关键词	 * @return	 */	public Set<String> getKeywords() {		Set<String> keywords = new HashSet<String>();				Elements elements = doc.select("[name=keywords]");		String content = elements.get(0).attributes().get("content");		String[] contents = content.split(",");		for (String keyword : contents) {			keyword = keyword.trim();			if(!StringUtil.isBlank(keyword)){				keywords.add(keyword);			}		}		return keywords;	}	/**	 * 获取产品信息	 * 	 * @return	 */	public List<Product> getProducts(int pageSize, int page) {		List<Product> products = new ArrayList<Product>();				Elements items = doc.getElementsByClass("list-item");		for (Element item : items) {			try {				// 店铺信息				Element storeElement = item.select(".store").get(0);				String storeHref = storeElement.attr("href");				String storeId = storeHref.substring(storeHref.lastIndexOf("/") + 1);				// 产品信息				Element productElement = item.select(".info h3 a").get(0);				String productHref = productElement.attr("href");				String[] qrdata = item.attr("qrdata").split("\\|");				String productId = qrdata[1];//				String productId = item.select(".atc-product-id").get(0).val();				String productName = productElement.attr("title");				// 产品图片				Element picElement = item.select("img").get(0);				String productPic = picElement.attr("src");				if (StringUtil.isBlank(productPic)) {					productPic = picElement.attr("image-src");				}				Product product = new Product(storeId, Long.parseLong(productId), productName, productHref, productPic);				products.add(product);			} catch (Exception e) {				e.printStackTrace();			}		}		return products;	}	public Store getStoreInfo() {		String storeName = doc.select(".shop-name").text();		String url = doc.select(".shop-name").attr("href");		String productCount = doc.select("#result-info strong").text();		Store store = new Store();		store.setName(storeName);		store.setUrl(url);        if(productCount.matches("\\d+")){            store.setProductCount(Integer.parseInt(productCount));        } else {            store.setProductCount(0);        }		return store;	}	public String getPrartName() {		Elements elements =doc.select(".section-product-title h3");		if(elements != null && !elements.isEmpty()){			return elements.text();		}		return "";	}}