package cc.surui.excel;import cc.surui.db.DatebaseInit;import cc.surui.db.SQLiteJDBC;import cc.surui.model.Product;import cc.surui.model.Ranking;import org.apache.poi.hssf.usermodel.*;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.Row;import java.io.*;import java.net.HttpURLConnection;import java.net.URL;import java.util.List;public class ExcelBuilder {    public static void main(String[] args) {        // 初始化DB        DatebaseInit.initDB(SQLiteJDBC.instance());        Ranking rankingQuery = new Ranking();        List<Ranking> rankings = rankingQuery.list();        ExcelBuilder.exportRankings(rankings, "workbook.xls");    }    private static boolean isUnique(String filePath, int num){        if(num == 0){            if(new File(filePath).exists()){                System.out.println(filePath +"已经存在");                return false;            }        } else {            if(new File(filePath + "(" + num + ")").exists()){                System.out.println(filePath + "(" + num + ")" +"已经存在");                return false;            }        }        return true;    }    private static String getUniqueFileName(String filePath, int num){        if(isUnique(filePath, num)){            return filePath;        } else {            return getUniqueFileName(filePath, ++num);        }    }    public static void exportRankings(List<Ranking> rankings, String filePath) {        String[] headers = {"店铺编号", "产品编号", "关键词", "排名", "日期", "产品链接"};        int[] heardWidths = {3000, 5000, 8000, 2000, 5000, 5000};        HSSFWorkbook wb = new HSSFWorkbook();        try {            String uniqueFilePath = getUniqueFileName(filePath, 0);            FileOutputStream fileOut = new FileOutputStream(uniqueFilePath);            HSSFSheet sheet = wb.createSheet();            HSSFPatriarch patriarch = sheet.createDrawingPatriarch();            wb.setSheetName(0, "关键词排名");            Row row = sheet.createRow(0);            // 创建表头            for (int index = 0; index < headers.length; index++) {                sheet.setColumnWidth(index, heardWidths[index]);                Cell cell = row.createCell(index);                cell.setCellValue(headers[index]);            }            for (int rowIdx = 0; rowIdx < rankings.size(); rowIdx++) {                Row dataRow = sheet.createRow(rowIdx + 1);                // 创建数据                Ranking ranking = rankings.get(rowIdx);                Cell storeId = dataRow.createCell(0);                storeId.setCellValue(Integer.parseInt(ranking.getStoreId()));                Cell productId = dataRow.createCell(1);                productId.setCellValue(ranking.getProductId());                Cell keyword = dataRow.createCell(2);                keyword.setCellValue(ranking.getKeyword());                Cell rank = dataRow.createCell(3);                rank.setCellValue(ranking.getRank());                Cell date = dataRow.createCell(4);                date.setCellValue(ranking.getDate());                Product product = new Product();                product.setId(ranking.getProductId());                product = product.get();                if(product != null){//                    byte[] imgData = readInputStream(new URL(product.getPic()));//                    //anchor主要用于设置图片的属性 x开始, y开始, x结束, y结束//                    HSSFClientAnchor anchor = new HSSFClientAnchor(0, 0, 255, 255,(short) 5, rowIdx + 1, (short) 5, rowIdx + 1);//                    anchor.setAnchorType(3);//                    //插入图片//                    patriarch.createPicture(anchor, wb.addPicture(imgData, HSSFWorkbook.PICTURE_TYPE_JPEG));                    Cell url = dataRow.createCell(5);                    url.setCellType(Cell.CELL_TYPE_FORMULA);                    url.setCellFormula("HYPERLINK(\""+product.getUrl()+"\", \"点击打开产品页面\")");                }            }            wb.write(fileOut);            fileOut.close();        } catch (IOException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    public static byte[] readInputStream(URL url) throws IOException{        ByteArrayOutputStream byteArrayOut = new ByteArrayOutputStream();        //打开链接        HttpURLConnection conn = (HttpURLConnection)url.openConnection();        //设置请求方式为"GET"        conn.setRequestMethod("GET");        int fileLength = conn.getContentLength();        //超时响应时间为5秒        conn.setConnectTimeout(5 * 1000);        //通过输入流获取图片数据        InputStream inStream = conn.getInputStream();        //得到图片的二进制数据，以二进制封装得到数据，具有通用性        //创建一个Buffer字符串        System.out.println(fileLength);        byte[] buffer = new byte[fileLength];        //每次读取的字符串长度，如果为-1，代表全部读取完毕        int len = 0;        //使用一个输入流从buffer里把数据读取出来        while( (len=inStream.read(buffer)) != -1 ){            //用输出流往buffer里写入数据，中间参数代表从哪个位置开始读，len代表读取的长度            byteArrayOut.write(buffer, 0, len);        }        //关闭输入流        inStream.close();        //把outStream里的数据写入内存        return byteArrayOut.toByteArray();    }}